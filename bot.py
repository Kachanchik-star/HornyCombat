import os
import json
import random
from datetime import datetime 
from aiogram import Bot, Dispatcher, types# type: ignore
from aiogram.filters import Command# type: ignore
from aiogram.types import Message, InlineQuery, InlineQueryResultArticle, InputTextMessageContent, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery # type: ignore
from dotenv import load_dotenv# type: ignore
from aiogram.utils.keyboard import InlineKeyboardBuilder # type: ignore

async def get_top_text(top_type: str):
    if not players:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤."

    if top_type == "wins":
        sorted_players = sorted(players.items(), key=lambda x: x[1].get("wins", 0), reverse=True)
        title = "üèÜ –¢–æ–ø-10 –ø–æ –ø–æ–±–µ–¥–∞–º:"
        value = lambda p: f"{p['wins']} –ø–æ–±–µ–¥"
    elif top_type == "size":
        sorted_players = sorted(players.items(), key=lambda x: (x[1].get("attack", 0) + x[1].get("defense", 0)), reverse=True)
        title = "ü•íüçí –¢–æ–ø-10 –ø–æ —Å—É–º–º–µ —á–ª–µ–Ω–∞ –∏ —Å–∏—Å–µ–∫:"
        value = lambda p: f"{p['attack']}—Å–º + {p['defense']} lvl"
    elif top_type == "winrate":
        def winrate(p):
            total = p["wins"] + p["losses"]
            return (p["wins"] / total * 100) if total > 0 else 0
        sorted_players = sorted(players.items(), key=lambda x: winrate(x[1]), reverse=True)
        title = "üìä –¢–æ–ø-10 –ø–æ –≤–∏–Ω—Ä–µ–π—Ç—É:"
        value = lambda p: f"{(p['wins'] / (p['wins'] + p['losses']) * 100):.1f}%" if (p['wins'] + p['losses']) > 0 else "0%"
    else:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–æ–ø–∞."

    text = f"{title}\n\n"
    for i, (user_id, data) in enumerate(sorted_players[:10], 1):
        name = data.get("name")
        if not name:
            try:
                user = await bot.get_chat(int(user_id))
                name = user.full_name[:20]
                players[user_id]["name"] = name
                save_players()
            except:
                name = f"ID:{user_id}"
        text += f"{i}. {name} ‚Äî {value(data)}\n"
    return text

def get_top_keyboard(current: str, owner_id: str):
    order = ["wins", "size", "winrate"]
    labels = {"wins": "üèÜ –ü–æ–±–µ–¥—ã", "size": "ü•íüçí –†–∞–∑–º–µ—Ä", "winrate": "üìä –í–∏–Ω—Ä–µ–π—Ç"}
    idx = order.index(current)
    next_type = order[(idx + 1) % len(order)]
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_menu_{owner_id}"),
            InlineKeyboardButton(text=f"‚û°Ô∏è {labels[next_type]}", callback_data=f"top_{next_type}")
        ]
    ])

GROW_COOLDOWN = 2 * 60 * 60  # 2 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
DATA_FILE = "players.json"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –±–∞–∑—É
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        players = json.load(f)
else:
    players = {}

pending_fights = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –Ω–∞ –±–æ–π
message_owners = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π {message_id: user_id}

ADMIN_ID = 887888895

def init_player(user_id: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞"""
    if user_id not in players:
        players[user_id] = {
            "attack": 10,  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç 10 —Å–º
            "defense": 2,  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç 2 lvl
            "wins": 0,
            "losses": 0,
            "last_grow": 0
        }
        save_players()

def save_players():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"""
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(players, f, ensure_ascii=False, indent=2)

def get_name(user: types.User):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return f"@{user.username}" if user.username else user.full_name[:20]

def get_grow_cooldown_text(user_id: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –æ—Å—Ç–∞–≤—à–∏–º—Å—è –≤—Ä–µ–º–µ–Ω–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–æ—Å—Ç–∞"""
    now_ts = int(datetime.now().timestamp())
    last_grow_ts = players[user_id]["last_grow"]
    remain = GROW_COOLDOWN - (now_ts - last_grow_ts)
    
    if remain <= 0:
        return "–ú–æ–∂–Ω–æ —Ä–∞—Å—Ç–∏—Ç—å! üå±"
    
    hours = remain // 3600
    minutes = (remain % 3600) // 60
    seconds = remain % 60
    
    if hours > 0:
        return f"–ü–æ–¥–æ–∂–¥–∏ {hours}—á {minutes}–º {seconds}—Å"
    else:
        return f"–ü–æ–¥–æ–∂–¥–∏ {minutes}–º {seconds}—Å"

def can_grow(user_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ —Ä–∞—Å—Ç–∏"""
    now_ts = int(datetime.now().timestamp())
    last_grow_ts = players[user_id]["last_grow"]
    return now_ts - last_grow_ts >= GROW_COOLDOWN

def grow_player(user_id: str) -> dict:
    cucumber_change = random.randint(-2, 13)
    shield_change = random.randint(-2, 5)
    players[user_id]["attack"] += cucumber_change
    players[user_id]["defense"] += shield_change
    players[user_id]["last_grow"] = int(datetime.now().timestamp())
    save_players()
    return {
        "cucumber_change": cucumber_change,
        "shield_change": shield_change,
        "new_attack": players[user_id]["attack"],
        "new_defense": players[user_id]["defense"]
    }

def calculate_battle_damage(attacker_stats, defender_stats):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–Ω–∞ —Å –±–æ–ª—å—à–µ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å—é"""
    attack = attacker_stats["attack"]
    defense = defender_stats["defense"]
    
    # –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω —Å –±–æ–ª—å—à–∏–º —Ä–∞–∑–±—Ä–æ—Å–æ–º
    base_damage = attack * random.uniform(0.5, 1.8)  # –æ—Ç 50% –¥–æ 180% –æ—Ç –∞—Ç–∞–∫–∏
    
    # –ó–∞—â–∏—Ç–∞ —Å–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–Ω, –Ω–æ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
    defense_reduction = defense * random.uniform(0.3, 0.8)  # –∑–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç 30% –¥–æ 80%
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω
    damage = base_damage - defense_reduction
    damage = max(1, round(damage))  # –º–∏–Ω–∏–º—É–º 1 —É—Ä–æ–Ω–∞
    
    # –®–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞ (15%)
    is_crit = random.random() < 0.15
    if is_crit:
        damage = int(damage * random.uniform(1.5, 2.5))  # –∫—Ä–∏—Ç –æ—Ç 150% –¥–æ 250%
    
    # –®–∞–Ω—Å –ø—Ä–æ–º–∞—Ö–∞ (10%) - —É—Ä–æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 0
    is_miss = random.random() < 0.10
    if is_miss:
        damage = 0
        is_crit = False
    
    # –®–∞–Ω—Å —É–¥–∞—á–Ω–æ–≥–æ —É–¥–∞—Ä–∞ (5%) - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∑–∞—â–∏—Ç—É
    is_lucky = random.random() < 0.05
    if is_lucky and not is_miss:
        damage = int(attack * random.uniform(1.2, 2.0))
        return damage, is_crit, is_miss, is_lucky
    
    return damage, is_crit, is_miss, False

def get_profile_text(user_id: str, user: types.User) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    if user_id not in players:
        return "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!"
    
    p = players[user_id]
    total = p["wins"] + p["losses"]
    winrate = (p["wins"] / total * 100) if total > 0 else 0
    
    return (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å {get_name(user)}\n"
        f"ü•í –ß–ª–µ–Ω: {p['attack']}—Å–º\n"
        f"üçí–°–∏—Å—å–∫–∏: {p['defense']} lvl\n"
        f"üèÜ –ü–æ–±–µ–¥: {p['wins']}\n"
        f"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {p['losses']}\n"
        f"üìä –í–∏–Ω—Ä–µ–π—Ç: {winrate:.1f}%\n\n"
        f"üïê –†–æ—Å—Ç: {get_grow_cooldown_text(user_id)}"
    )

def get_main_keyboard(owner_id: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile_{owner_id}")],
        [InlineKeyboardButton(text="üå± –í—ã—Ä–∞—Å—Ç–∏—Ç—å —á–ª–µ–Ω", callback_data=f"grow_{owner_id}")],
        [InlineKeyboardButton(text="‚öîÔ∏è –ê—Ç–∞–∫–∞", callback_data=f"attack_{owner_id}")],
        [InlineKeyboardButton(text="üèÜ –¢–æ–ø", callback_data="top_wins")]
    ])

def get_fight_keyboard(attacker_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öîÔ∏è –ü—Ä–∏–Ω—è—Ç—å –±–æ–π!", callback_data=f"fight_accept_{attacker_id}")]
    ])

# ===================
# INLINE HANDLERS
# ===================

@dp.inline_query()
async def inline_query_handler(query: InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∑–∞–ø—Ä–æ—Å–æ–≤"""
    user_id = str(query.from_user.id)
    init_player(user_id)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—å—é —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    article = InlineQueryResultArticle(
        id="main_menu",
        title="üéÆ RPG H&C",
        description="–¢–≤–æ—è RPG –∏–≥—Ä–∞ —Å —á–ª–µ–Ω–∞–º–∏ –∏ —Å–∏—Å–∫–∞–º–∏!",
        input_message_content=InputTextMessageContent(
            message_text="üéÆ **RPG H&C** - —Ç–≤–æ—è –º–∏–Ω–∏-RPG –∏–≥—Ä–∞!\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="Markdown"
        ),
        reply_markup=get_main_keyboard(user_id),
    )
    
    await query.answer([article], cache_time=1)

# ===================
# CALLBACK HANDLERS
# ===================

@dp.callback_query(lambda c: c.data.startswith("profile_"))
async def callback_profile(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ callback —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–∑ callback_data
    owner_id = callback.data.replace("profile_", "")
    user_id = str(callback.from_user.id)
    user = callback.from_user  # <--- –¥–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    if owner_id != user_id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ –º–µ–Ω—é! –°–æ–∑–¥–∞–π —Å–≤–æ–µ —á–µ—Ä–µ–∑ inline —Ä–µ–∂–∏–º", show_alert=True)
        return

    init_player(user_id)

    if user_id not in players:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π /grow!", show_alert=True)
        return

    p = players[user_id]
    total = p["wins"] + p["losses"]
    winrate = (p["wins"] / total * 100) if total > 0 else 0

    profile_text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å {get_name(user)}\n"
        f"ü•í –ß–ª–µ–Ω: {p['attack']}—Å–º\n"
        f"üçí–°–∏—Å—å–∫–∏: {p['defense']} –ª–≤–ª\n"
        f"üèÜ –ü–æ–±–µ–¥: {p['wins']}\n"
        f"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {p['losses']}\n"
        f"üìä –í–∏–Ω—Ä–µ–π—Ç: {winrate:.1f}%"
    )

    if callback.inline_message_id:
        await bot.edit_message_text(
            text=profile_text,
            inline_message_id=callback.inline_message_id,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_menu_{user_id}")]
            ])
        )
    else:
        await callback.message.edit_text(
            text=profile_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_menu_{user_id}")]
            ])
        )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("grow_"))
async def callback_grow(callback: CallbackQuery):
    """–†–æ—Å—Ç –æ–≥—É—Ä—Ü–∞ —á–µ—Ä–µ–∑ callback —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–∑ callback_data
    owner_id = callback.data.replace("grow_", "")
    user_id = str(callback.from_user.id)
    
    if owner_id != user_id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ –º–µ–Ω—é! –°–æ–∑–¥–∞–π —Å–≤–æ–µ —á–µ—Ä–µ–∑ inline —Ä–µ–∂–∏–º", show_alert=True)
        return
    
    init_player(user_id)

    if not can_grow(user_id):
        cooldown_text = get_grow_cooldown_text(user_id)
        
        if callback.inline_message_id:
            await bot.edit_message_text(
                text=f"‚è∞ {cooldown_text}",
                inline_message_id=callback.inline_message_id,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_menu_{user_id}")]
                ])
            )
        else:
            await callback.message.edit_text(
                f"‚è∞ {cooldown_text}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_menu_{user_id}")]
                ])
            )
        await callback.answer("–ï—â–µ —Ä–∞–Ω–æ —Ä–∞—Å—Ç–∏—Ç—å! ‚è∞")
        return

    # –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–æ—Å—Ç–∞ —Å –±–æ–ª—å—à–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    result = grow_player(user_id)
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    cucumber_emoji = "üìà" if result["cucumber_change"] > 0 else "üìâ" if result["cucumber_change"] < 0 else "‚û°Ô∏è"
    shield_emoji = "üìà" if result["shield_change"] > 0 else "üìâ" if result["shield_change"] < 0 else "‚û°Ô∏è"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if result["cucumber_change"] >= 10:
        cucumber_emoji = "üöÄ"
    elif result["cucumber_change"] <= -2:
        cucumber_emoji = "üí•"
        
    if result["shield_change"] >= 4:
        shield_emoji = "üöÄ"
    elif result["shield_change"] <= -2:
        shield_emoji = "üí•"

    grow_text = (
        f"üå± **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ—Å—Ç–∞:**\n\n"
        f"ü•í –ß–ª–µ–Ω: {cucumber_emoji} {result['cucumber_change']:+}—Å–º (—Ç–µ–ø–µ—Ä—å {result['new_attack']}—Å–º)\n"
        f"üçí–°–∏—Å—å–∫–∏: {shield_emoji} {result['shield_change']:+} lvl (—Ç–µ–ø–µ—Ä—å {result['new_defense']} lvl)"
    )
    
    if callback.inline_message_id:
        await bot.edit_message_text(
            text=grow_text,
            inline_message_id=callback.inline_message_id,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_menu_{user_id}")]
            ])
        )
    else:
        await callback.message.edit_text(
            grow_text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_menu_{user_id}")]
            ])
        )
    await callback.answer("–¢—ã –≤—ã—Ä–æ—Å! üå±")

@dp.callback_query(lambda c: c.data.startswith("attack_"))
async def callback_attack(callback: CallbackQuery):
    """–í—ã–∑–æ–≤ –Ω–∞ –±–æ–π —á–µ—Ä–µ–∑ callback (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –∞—Ç–∞–∫–∏)"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–∑ callback_data
    owner_id = callback.data.replace("attack_", "")
    user_id = str(callback.from_user.id)
    
    init_player(owner_id)  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ (—Ç–æ–≥–æ, –∫—Ç–æ –≤—ã–∑–≤–∞–ª)
    
    p = players[owner_id]
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π fight_id –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—è
    fight_id = f"fight_{owner_id}_{int(datetime.now().timestamp())}"
    
    attack_text = (
        f"‚öî {get_name(callback.from_user)} –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞ –±–æ–π!\n"
        f"–ß–ª–µ–Ω: {p['attack']}, –°–∏—Å—å–∫–∏: {p['defense']}\n"
        f"–ü–æ–±–µ–¥: {p['wins']}, –ø–æ—Ä–∞–∂–µ–Ω–∏–π: {p['losses']}\n"
    )
    
    if callback.inline_message_id:
        await bot.edit_message_text(
            text=attack_text,
            inline_message_id=callback.inline_message_id,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öîÔ∏è –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è", callback_data=f"accept_{fight_id}")]
            ])
        )
    else:
        await callback.message.edit_text(
            text=attack_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öîÔ∏è –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è", callback_data=f"accept_{fight_id}")]
            ])
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∑–æ–≤–µ
    pending_fights[fight_id] = owner_id
    
    await callback.answer("–¢—ã –≥–æ—Ç–æ–≤ –∫ –±–æ—é! ‚öîÔ∏è")

@dp.callback_query(lambda c: c.data.startswith("accept_"))
async def callback_fight_accept(callback: CallbackQuery):
    fight_id = callback.data.replace("accept_", "")
    if fight_id not in pending_fights:
        await callback.answer("–≠—Ç–æ—Ç –±–æ–π —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω!", show_alert=True)
        return

    attacker_id = pending_fights[fight_id]
    defender_id = str(callback.from_user.id)

    if attacker_id == defender_id:
        await callback.answer("–ù–µ–ª—å–∑—è —Å—Ä–∞–∂–∞—Ç—å—Å—è —Å —Å–∞–º–∏–º —Å–æ–±–æ–π! ü§™", show_alert=True)
        return

    if attacker_id not in players or defender_id not in players:
        await callback.answer("–û–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –±–æ—è
    if players[attacker_id]["attack"] < 3 or players[attacker_id]["defense"] < 1:
        await callback.answer("–£ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —á–ª–µ–Ω –∏–ª–∏ –∑–∞—â–∏—Ç–∞ –¥–ª—è –±–æ—è!", show_alert=True)
        return
    if players[defender_id]["attack"] < 3 or players[defender_id]["defense"] < 1:
        await callback.answer("–£ —Ç–µ–±—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —á–ª–µ–Ω –∏–ª–∏ –∑–∞—â–∏—Ç–∞ –¥–ª—è –±–æ—è!", show_alert=True)
        return

    # –ù–û–í–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –±–æ—è —Å —Ä–∞–Ω–¥–æ–º–æ–º
    attacker = players[attacker_id]
    defender = players[defender_id]

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    dmg1, crit1, miss1, lucky1 = calculate_battle_damage(attacker, defender)
    dmg2, crit2, miss2, lucky2 = calculate_battle_damage(defender, attacker)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    winner_attack_bonus = random.randint(2, 5)
    winner_defense_bonus = random.randint(1, 3)

    if dmg1 > dmg2:
        attacker["wins"] += 1
        defender["losses"] += 1
        attacker["attack"] += winner_attack_bonus
        attacker["defense"] += winner_defense_bonus
        defender["attack"] -= winner_attack_bonus
        defender["defense"] -= winner_defense_bonus
        # ‚Üì‚Üì‚Üì –î–æ–±–∞–≤—å —ç—Ç–æ ‚Üì‚Üì‚Üì
        try:
            attacker_user = await bot.get_chat(int(attacker_id))
            attacker_name = f"@{attacker_user.username}" if attacker_user.username else attacker_user.full_name[:20]
        except:
            attacker_name = "–ê—Ç–∞–∫—É—é—â–∏–π"
        result = f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {attacker_name}"
        winner_bonus = f"\nüéÅ –ü–æ–ª—É—á–∞–µ—Ç: +{winner_attack_bonus}—Å–º —á–ª–µ–Ω–∞, +{winner_defense_bonus} lvl —Å–∏—Å–µ–∫"
    elif dmg2 > dmg1:
        defender["wins"] += 1
        attacker["losses"] += 1
        defender["attack"] += winner_attack_bonus
        defender["defense"] += winner_defense_bonus
        attacker["attack"] -= winner_attack_bonus
        attacker["defense"] -= winner_defense_bonus
        result = f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {get_name(callback.from_user)}"
        winner_bonus = f"\nüéÅ –ü–æ–ª—É—á–∞–µ—Ç: +{winner_attack_bonus}—Å–º —á–ª–µ–Ω–∞,+{winner_defense_bonus} lvl —Å–∏—Å–µ–∫"
    else:
        result = "ü§ù –ù–∏—á—å—è! –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã."
        winner_bonus = ""

    save_players()
    del pending_fights[fight_id]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è
    try:
        attacker_user = await bot.get_chat(int(attacker_id))
        attacker_name = f"@{attacker_user.username}" if attacker_user.username else attacker_user.full_name[:20]
    except:
        attacker_name = "–ê—Ç–∞–∫—É—é—â–∏–π"
    
    text = "‚öîÔ∏è **–†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è:**\n\n"
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ç–∞–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    text += f"üî∏ {attacker_name}:\n"
    if miss1:
        text += f"   üí® –ü—Ä–æ–º–∞—Ö! (0 —É—Ä–æ–Ω–∞)"
    else:
        text += f"   üí• {dmg1} —É—Ä–æ–Ω–∞"
        if crit1:
            text += " üî•–ö–†–ò–¢!"
        if lucky1:
            text += " ‚≠ê–£–î–ê–ß–ê!"
    text += "\n"
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ç–∞–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    text += f"üîπ {get_name(callback.from_user)}:\n"
    if miss2:
        text += f"   üí® –ü—Ä–æ–º–∞—Ö! (0 —É—Ä–æ–Ω–∞)"
    else:
        text += f"   üí• {dmg2} —É—Ä–æ–Ω–∞"
        if crit2:
            text += " üî•–ö–†–ò–¢!"
        if lucky2:
            text += " ‚≠ê–£–î–ê–ß–ê!"
    text += "\n\n"
    
    text += result + winner_bonus

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±–æ—è
    if callback.inline_message_id:
        await bot.edit_message_text(
            text=text,
            inline_message_id=callback.inline_message_id,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –±–æ–π", callback_data=f"back_to_menu_{defender_id}")]
            ])
        )
    else:
        await callback.message.edit_text(
            text=text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –±–æ–π", callback_data=f"back_to_menu_{defender_id}")]
            ])
        )
    
    await callback.answer("–ë–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω! ‚öîÔ∏è")

@dp.callback_query(lambda c: c.data.startswith("back_to_menu_"))
async def callback_back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–∑ callback_data
    owner_id = callback.data.replace("back_to_menu_", "")
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏–º –º–µ–Ω—é
    if owner_id != user_id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ –º–µ–Ω—é! –°–æ–∑–¥–∞–π —Å–≤–æ–µ —á–µ—Ä–µ–∑ inline —Ä–µ–∂–∏–º", show_alert=True)
        return
    
    menu_text = "üéÆ **RPG H&C** - —Ç–≤–æ—è –º–∏–Ω–∏-RPG –∏–≥—Ä–∞!\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    if callback.inline_message_id:
        await bot.edit_message_text(
            text=menu_text,
            inline_message_id=callback.inline_message_id,
            parse_mode="Markdown",
            reply_markup=get_main_keyboard(user_id)
        )
    else:
        await callback.message.edit_text(
            text=menu_text,
            parse_mode="Markdown",
            reply_markup=get_main_keyboard(user_id)
        )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("top_"))
async def callback_top_table(callback: CallbackQuery):
    top_type = callback.data.replace("top_", "")
    owner_id = str(callback.from_user.id)
    text = await get_top_text(top_type)
    kb = get_top_keyboard(top_type, owner_id)
    if callback.inline_message_id:
        await bot.edit_message_text(
            text=text,
            inline_message_id=callback.inline_message_id,
            reply_markup=kb
        )
    else:
        await callback.message.edit_text(
            text=text,
            reply_markup=kb
        )
    await callback.answer()

# ===================
# –û–ë–´–ß–ù–´–ï –ö–û–ú–ê–ù–î–´ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
# ===================

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç"""
    user_id = str(message.from_user.id)
    init_player(user_id)
    
    await message.answer(
        f"üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **RPG H&C**, (–∞–≤—Ç–æ—Ä @knnzas), {get_name(message.from_user)}!\n\n"
        f"–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n"
        f"–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:\n"
        f"1Ô∏è‚É£ **Inline —Ä–µ–∂–∏–º**: –Ω–∞–ø–∏—à–∏ `@{(await bot.get_me()).username}` –≤ –ª—é–±–æ–º —á–∞—Ç–µ\n"
        f"2Ô∏è‚É£ **–ö–æ–º–∞–Ω–¥—ã**: /grow, /profile, /fight\n\n"
        f"üå± **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        f"‚Ä¢ –†–∞—Å—Ç–∏ —Å–≤–æ–π —á–ª–µ–Ω –¥–ª—è - –ê—Ç–∞–∫–∏\n"
        f"‚Ä¢ –£–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–≤–æ–∏—Ö –°–∏—Å–µ–∫ –¥–ª—è - –ó–∞—â–∏—Ç—ã\n"
        f"‚Ä¢ –°—Ä–∞–∂–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –≤ –±–æ—è—Ö\n"
        f"‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        f"‚Ä¢ –í –±–æ—è—Ö –µ—Å—Ç—å –∫—Ä–∏—Ç—ã, –ø—Ä–æ–º–∞—Ö–∏ –∏ —É–¥–∞—á–∞!\n"
        f"‚Ä¢ –î–∞–∂–µ —Å–ª–∞–±—ã–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–±–µ–¥–∏—Ç—å —Å–∏–ª—å–Ω–æ–≥–æ!\n\n"
        f"–£–¥–∞—á–∏ –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è—Ö! üå±",
        parse_mode="Markdown"
    )

@dp.message(Command("grow"))
async def cmd_grow(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–æ—Å—Ç–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    user_id = str(message.from_user.id)
    init_player(user_id)
    
    if not can_grow(user_id):
        cooldown_text = get_grow_cooldown_text(user_id)
        await message.answer(f"‚è∞ {cooldown_text}")
        return
    
    result = grow_player(user_id)
    cucumber_emoji = "üìà" if result["cucumber_change"] > 0 else "üìâ" if result["cucumber_change"] < 0 else "‚û°Ô∏è"
    shield_emoji = "üìà" if result["shield_change"] > 0 else "üìâ" if result["shield_change"] < 0 else "‚û°Ô∏è"
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if result["cucumber_change"] >= 10:
        cucumber_emoji = "üöÄ"
    elif result["cucumber_change"] <= -2:
        cucumber_emoji = "üí•"
        
    if result["shield_change"] >= 4:
        shield_emoji = "üöÄ"
    elif result["shield_change"] <= -2:
        shield_emoji = "üí•"
    
    await message.answer(
        f"üå± **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ—Å—Ç–∞:**\n\n"
        f"ü•í –ß–ª–µ–Ω: {cucumber_emoji} {result['cucumber_change']:+}—Å–º (—Ç–µ–ø–µ—Ä—å {result['new_attack']}—Å–º)\n"
        f"üçí–°–∏—Å—å–∫–∏: {shield_emoji} {result['shield_change']:+} lvl (—Ç–µ–ø–µ—Ä—å {result['new_defense']} lvl)",
        parse_mode="Markdown"
    )

@dp.message(Command("profile"))
async def cmd_profile(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    user_id = str(message.from_user.id)
    init_player(user_id)
    
    profile_text = get_profile_text(user_id, message.from_user)
    await message.answer(profile_text)

@dp.message(Command("fight"))
async def cmd_fight(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –±–æ—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    if not message.reply_to_message:
        await message.answer("–û—Ç–≤–µ—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –µ–≥–æ –Ω–∞ –±–æ–π!")
        return
    
    user_id = str(message.from_user.id)
    init_player(user_id)
    
    p = players[user_id]
    await message.answer(
        f"‚öîÔ∏è **{get_name(message.from_user)} –≥–æ—Ç–æ–≤ –∫ –±–æ—é!**\n\n"
        f"ü•í –ß–ª–µ–Ω: {p['attack']}—Å–º\n"
        f"üçí–°–∏—Å—å–∫–∏: {p['defense']} lvl\n"
        f"üèÜ –ü–æ–±–µ–¥: {p['wins']}\n"
        f"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {p['losses']}\n\n"
        f"–ö—Ç–æ –æ—Å–º–µ–ª–∏—Ç—Å—è –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?\n"
        f"üí° *–¢–µ–ø–µ—Ä—å –≤ –±–æ—è—Ö –µ—Å—Ç—å –∫—Ä–∏—Ç—ã, –ø—Ä–æ–º–∞—Ö–∏ –∏ —É–¥–∞—á–∞!*",
        parse_mode="Markdown",
        reply_markup=get_fight_keyboard(user_id)
    )

@dp.message(Command("admin_reset_all"))
async def admin_reset_all(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    for user_id in players:
        players[user_id] = {
            "attack": 10,
            "defense": 2,
            "wins": 0,
            "losses": 0,
            "last_grow": 0
        }
    save_players()
    await message.answer("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã.")

@dp.message(Command("admin_reset"))
async def admin_reset(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if not message.reply_to_message:
        await message.answer("–û—Ç–≤–µ—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞.")
        return
    target_id = str(message.reply_to_message.from_user.id)
    players[target_id] = {
        "attack": 10,
        "defense": 2,
        "wins": 0,
        "losses": 0,
        "last_grow": 0
    }
    save_players()
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_name(message.reply_to_message.from_user)} —Å–±—Ä–æ—à–µ–Ω.")

@dp.message(Command("admin_set"))
async def admin_set(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if not message.reply_to_message:
        await message.answer("–û—Ç–≤–µ—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–§–æ—Ä–º–∞—Ç: /admin_set 15 3")
        return
    args = message.text.split()
    if len(args) != 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /admin_set <—Å–º> <lvl>\n–ü—Ä–∏–º–µ—Ä: /admin_set 15 3")
        return
    try:
        attack = int(args[1])
        defense = int(args[2])
    except ValueError:
        await message.answer("–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return
    target_id = str(message.reply_to_message.from_user.id)
    if target_id not in players:
        init_player(target_id)
    players[target_id]["attack"] = attack
    players[target_id]["defense"] = defense
    save_players()
    await message.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {attack}—Å–º –∏ {defense} lvl –¥–ª—è {get_name(message.reply_to_message.from_user)}.")
@dp.message(Command("top"))
async def cmd_top(message: Message):
    user_id = str(message.from_user.id)
    text = await get_top_text("wins")
    kb = get_top_keyboard("wins", user_id)
    await message.answer(text, reply_markup=kb)
if __name__ == "__main__":
    import asyncio
    print("üöÄ RPG H&C –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.run(dp.start_polling(bot))